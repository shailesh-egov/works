@startuml
title SDIP Certificate Store - Daily Automatic Certificate Pull and Sync

skinparam participant {
    BackgroundColor<<revenue>> lightblue
    BorderColor<<revenue>> blue
    FontStyle<<revenue>> bold
}

skinparam participant {
    BackgroundColor<<health>> lightcyan
    BorderColor<<health>> darkblue
    FontStyle<<health>> bold
}

skinparam participant {
    BackgroundColor<<pension>> lightgreen
    BorderColor<<pension>> green
    FontStyle<<pension>> bold
}

skinparam participant {
    BackgroundColor<<citizen>> lightyellow
    BorderColor<<citizen>> orange
    FontStyle<<citizen>> bold
}

skinparam participant {
    BackgroundColor<<sdip>> wheat
    BorderColor<<sdip>> brown
    FontStyle<<sdip>> italic
}

actor Citizen as "Senior\nCitizen" <<citizen>>
actor PensionDept as "Social Welfare\nDepartment" <<pension>>
participant RevenueDept as "Revenue\nDepartment" <<revenue>>
participant HealthDept as "Health\nDepartment" <<health>>

participant CertificateService as "Certificate\nService" <<sdip>>
participant CertificateStore as "Certificate\nStore" <<sdip>>
participant CatalogueService as "Catalogue\nService" <<sdip>>
participant SchedulerService as "Scheduler\nService" <<sdip>>

note over Citizen, SchedulerService
**Scenario: Daily automatic certificate pull from departments**
- Certificates are already defined in catalog by departments
- Daily scheduler automatically pulls certificates from departments
- No manual request from Social Welfare Department
- Certificate Store continuously updated with latest certificates
end note

== Phase 1: Daily Certificate Generation Trigger ==

note over SchedulerService: **Daily at 2:00 AM**\nScheduler triggers certificate generation

SchedulerService -> CertificateService: **Trigger daily certificate generation**
activate SchedulerService
activate CertificateService
note over CertificateService: **Certificate Service orchestrates:**\n- Query catalog for certificate types and formats\n- Fetch data from departments using GraphQL APIs\n- Generate certificates in Verifiable Credential (VC) format\n- Apply cryptographic signatures using department private keys\n- Store tamper-proof certificates in Certificate Store\n- Track expiry dates for automatic reissuance

== Phase 2: Certificate Service Gets Catalog ==

CertificateService -> CatalogueService: Get list of published certificate types
activate CatalogueService
note over CatalogueService: **Query catalog for:**\n- All certificate types published by departments\n- Revenue Dept: Income certificates, Land certificates\n- Health Dept: Death status certificates\n- Birth certificates, etc.

CatalogueService --> CertificateService: Certificate catalog list
deactivate CatalogueService

== Phase 3: Certificate Service Fetches Data and Generates Certificates ==

CertificateService -> RevenueDept: **Fetch income data for all citizens**\n(Based on catalog definition)
activate RevenueDept
note over RevenueDept: **Revenue Department provides:**\n- Query income database for all citizens\n- Return raw income data\n- No certificate generation at department level

RevenueDept -> RevenueDept: Query all citizen income records
RevenueDept --> CertificateService: **Raw income data batch**\n{citizenId: income_data}
deactivate RevenueDept

CertificateService -> CertificateService: **Generate income certificates in VC format:**\n- Format data according to Verifiable Credential standard\n- Create tamper-proof, machine-readable certificates\n- Apply cryptographic digital signatures using department's private key\n- Set expiry dates for automatic reissuance tracking\n- Enable offline verification through signed PDFs

CertificateService -> RevenueDept: **Fetch land holdings data for all citizens**\n(Based on catalog definition)
activate RevenueDept
note over RevenueDept: **Revenue Department provides:**\n- Query land records database\n- Return raw land data\n- No certificate generation at department level

RevenueDept -> RevenueDept: Query all citizen land records
RevenueDept --> CertificateService: **Raw land data batch**\n{citizenId: land_data}
deactivate RevenueDept

CertificateService -> CertificateService: **Generate land certificates**\n- Process land data\n- Create standardized certificates\n- Apply digital signatures

== Phase 4: Similar Process for Other Departments ==

note over CertificateService, HealthDept: **Same process repeated for Health Department:**\n- Certificate Service fetches death records data\n- Certificate Service generates death status certificates\n- Apply digital signatures

note over CertificateService, HealthDept: **Same process for any other departments:**\n- Fetch birth data from Civil Registration\n- Fetch education data from Education Department\n- Fetch employment data from Labor Department\n- Certificate Service generates all certificate types

== Phase 5: Store All Generated Certificates ==

CertificateService -> CertificateStore: **Store all generated certificates**
activate CertificateStore
CertificateStore -> CertificateStore: **Store all certificate types:**\n- Income certificates (generated by Certificate Service)\n- Land certificates (generated by Certificate Service)\n- Death certificates (generated by Certificate Service)\n- Birth certificates (generated by Certificate Service)\n- Education certificates (generated by Certificate Service)\n- Employment certificates (generated by Certificate Service)\n- Update existing certificates\n- Add new citizen certificates\n- Mark expired certificates
CertificateStore --> CertificateService: All certificates stored
deactivate CertificateStore

CertificateService --> SchedulerService: **All certificates generated and stored**\nTotal certificates: 90,000+
deactivate CertificateService

note over SchedulerService: **Daily sync summary:**\n- Revenue Dept: 27,000 certificates (Income + Land)\n- Health Dept: 25,000 certificates (Death status)\n- Civil Registration: 18,000 certificates (Birth)\n- Education Dept: 12,000 certificates (Education)\n- Labor Dept: 8,000 certificates (Employment)\n- Total: 90,000+ certificates updated\n- Next sync: Tomorrow 2:00 AM

deactivate SchedulerService

== Phase 5: Citizen Pension Application (Using Pre-loaded Certificates) ==

activate Citizen
Citizen -> PensionDept: Apply for old age pension
activate PensionDept
note over Citizen, PensionDept: Application includes:\n- Personal details\n- Consent for certificate access

PensionDept --> Citizen: Application received\nProcessing using existing certificates
deactivate Citizen

== Phase 6: Certificate Retrieval and Processing ==

PensionDept -> CertificateStore: **Retrieve citizen's income certificate**
activate CertificateStore
CertificateStore --> PensionDept: Income certificate (Already available in store)
deactivate CertificateStore
note over PensionDept: Income: ₹8,000/month\n(From daily sync - no generation needed)

PensionDept -> CertificateStore: **Retrieve citizen's land holdings certificate**
activate CertificateStore
CertificateStore --> PensionDept: Land holdings certificate (Already available in store)
deactivate CertificateStore
note over PensionDept: Land: 0.5 acres\n(From daily sync - no generation needed)

PensionDept -> CertificateStore: **Retrieve citizen's death status certificate**
activate CertificateStore
CertificateStore --> PensionDept: Death status certificate (Already available in store)
deactivate CertificateStore
note over PensionDept: Death Record: Not found - Alive\n(From daily sync - no generation needed)

== Phase 7: Process Pension Application ==

PensionDept -> PensionDept: **Process all certificate data:**\n- Income: ₹8,000/month ✓\n- Land: 0.5 acres ✓\n- Death status: Alive ✓\n- Calculate eligibility using pre-loaded certificates

alt All Certificates Confirm Eligibility
    PensionDept -> PensionDept: **Pension approved:**\n- Calculate pension amount\n- Setup payment schedule\n- Generate pension ID
    
    PensionDept -> Citizen: **Pension Approved!**\nMonthly pension: ₹2,000\nPayments start next month
    activate Citizen
    note over Citizen: Pension approved using\npre-loaded certificates from Certificate Store\n**No waiting time for certificate generation**
    deactivate Citizen
    
else Certificate Data Shows Ineligibility
    PensionDept -> Citizen: **Pension Denied**\nReason: Does not meet eligibility criteria
    activate Citizen
    note over Citizen: Application rejected based\non pre-loaded certificate analysis
    deactivate Citizen
end
deactivate PensionDept

== Phase 8: Audit and Compliance ==

note over PensionDept, HealthDept
**Complete audit trail maintained:**
- Daily certificate pull operations logged
- Certificate store update operations tracked
- Certificate access by pension department recorded
- Citizen consent and data access documented
- Inter-department certificate sharing monitored
end note

note over Citizen, SchedulerService: **Daily automatic certificate generation complete**\nFeatures:\n- Certificates generated in Verifiable Credential (VC) format\n- Cryptographically signed for tamper-proof verification\n- Offline verification capability through signed PDFs\n- Automatic expiry tracking and reissuance workflows\n- Citizen access through SDIP Citizen Portal\n- Machine-readable, standardized format for interoperability\n- No manual requests from consuming departments\n- Instant certificate availability for pension processing
@enduml